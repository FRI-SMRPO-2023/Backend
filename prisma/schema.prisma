// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int               @id @default(autoincrement())
  username    String            @unique
  name        String
  lastName    String
  password    String
  email       String            @unique
  isAdmin     Boolean           @default(false)
  lastLogin   DateTime?
  projects    UsersOnProjects[]
  Task        Task[]
  TimeLog     TimeLog[]
  ProjectWall ProjectWall[]
}

model Project {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String
  users       UsersOnProjects[]
  stories     Story[]
  sprints     Sprint[]
  ProjectWall ProjectWall[]
}

// used as a many to many relationship table
model UsersOnProjects {
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     Int
  role          RoleInProject
  secondaryRole SecondaryRole?
  active        Boolean        @default(true)

  @@id([userId, projectId])
}

enum RoleInProject {
  ProductOwner
  ScrumMaster
  Developer
}

enum SecondaryRole {
  Developer
}

// TODO in the future : maybe change status type to some enum??
model Story {
  id                 Int           @id @default(autoincrement())
  project            Project       @relation(fields: [projectId], references: [id])
  projectId          Int
  name               String
  description        String
  priority           StoryPriority
  businessValue      Int
  acceptanceCriteria String
  status             String
  rejectedComment    String?
  rejectedSprint     Sprint?       @relation(name: "rejectedSprint", fields: [rejectedSprintId], references: [id])
  rejectedSprintId   Int?
  timeComplexity     Int?
  sprint             Sprint?       @relation(name: "currentSprint", fields: [sprintId], references: [id])
  sprintId           Int?
  tasks              Task[]

  @@unique([projectId, name])
  @@index([projectId])
}

enum StoryPriority {
  MustHave
  CouldHave
  ShouldHave
  WontHaveThisTime
}

model Task {
  id             Int        @id @default(autoincrement())
  story          Story      @relation(fields: [storyId], references: [id])
  storyId        Int
  description    String
  timeEstimation String
  asignee        User?      @relation(fields: [asigneeId], references: [id])
  asigneeId      Int?
  status         TaskStatus
  TimeLog        TimeLog[]

  @@unique([storyId, description])
}

enum TaskStatus {
  Unassigned
  Assigned
  Active
  Completed
}

model Sprint {
  id          Int      @id @default(autoincrement())
  name        String
  startDate   DateTime
  endDate     DateTime
  speed       Int?
  projectId   Int
  project     Project  @relation(fields: [projectId], references: [id])
  Story       Story[]  @relation("currentSprint")
  RejectStory Story[]  @relation("rejectedSprint")
}

model TimeLog {
  id             Int      @id @default(autoincrement())
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  taskId         Int
  task           Task     @relation(fields: [taskId], references: [id])
  day            DateTime
  hours          Float
  hours_estimate Float

  @@unique([userId, taskId, day])
}

model ProjectWall {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id])
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  edited    Boolean  @default(false)
  content   String
}
