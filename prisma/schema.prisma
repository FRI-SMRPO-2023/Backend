// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int               @id @default(autoincrement())
  username  String            @unique
  name      String
  lastName  String
  password  String
  email     String            @unique
  isAdmin   Boolean           @default(false)
  lastLogin DateTime?
  projects  UsersOnProjects[]
  Task      Task[]
}

model Project {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String
  users       UsersOnProjects[]
  stories     Story[]
}

// used as a many to many relationship table
model UsersOnProjects {
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  role      RoleInProject

  @@id([userId, projectId])
}

enum RoleInProject {
  ProductOwner
  ProjectManager
  ScrumMaster
  Developer
}

// TODO in the future : maybe change status type to some enum??
model Story {
  id                 Int           @id @default(autoincrement())
  project            Project       @relation(fields: [projectId], references: [id])
  projectId          Int
  name               String
  description        String
  priority           StoryPriority
  businessValue      BusinessValue
  acceptanceCriteria String
  status             String
  sprint             Sprint?       @relation(fields: [sprintId], references: [id])
  sprintId           Int?
  tasks              Task[]

  @@unique([projectId, name])
  @@index([projectId])
}

enum StoryPriority {
  MustHave
  CouldHave
  ShouldHave
  WontHaveThisTime
}

enum BusinessValue {
  Low
  Medium
  High
}

model Task {
  id             Int        @id @default(autoincrement())
  story          Story      @relation(fields: [storyId], references: [id])
  storyId        Int
  description    String
  timeEstimation String
  asignee        User?      @relation(fields: [asigneeId], references: [id])
  asigneeId      Int?
  status         TaskStatus
}

enum TaskStatus {
  Unassigned
  Assigned
  Active
  Completed
}

model Sprint {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  speed     Int
  stories   Story[]
}
