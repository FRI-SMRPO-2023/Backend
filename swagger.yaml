openapi: 3.0.4
info:
  title: KANBAN FAKE api
  version: 0.1.0
  description: This is a simple application made with Express and documented with Swagger
  contact:
    name: Mark Zakelj
servers:
  - url: http://localhost:8000
paths:
  /api/auth/login:
    post:
      summary: Login a user into the system, create a httpOnly cookie in browser
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: >-
            Login successfull. Return the User OR password is wrong and error
            message is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReturn'
        '409':
          description: Wrong email or password. Return Error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                example:
                  status: failed
                  error:
                    message: Incorrect password or email
                required:
                  - status
                  - error
        '500':
          description: Some server error
  /api/auth/logout:
    post:
      summary: Logout user from the system, delete the httpOnly cookie in browser
      tags:
        - Auth
      responses:
        '200':
          description: >-
            Logout successfull. Return OK. If user not logged in, also return
            this code, as the final state in the backend is the same.
        '500':
          description: Some server error
  /api/auth/is-authenticated:
    get:
      summary: Check if the current user is authenticated (has a valid cookie)
      tags:
        - Auth
      responses:
        '200':
          description: User is authenticated. Return OK and a user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReturn'
        '401':
          description: User not logged in. Return Unauthorized
  /api/projects:
    get:
      summary: Get all projects
      tags:
        - Project
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectReturn'
          description: Return all a list of all projects
    post:
      summary: Create a new Project
      tags:
        - Project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        '201':
          description: The created Project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectReturn'
        '409':
          description: Project with specified name already exists.
        '500':
          description: Some server error
  /api/projects/{id}:
    patch:
      summary: Update any (or multiple) fields in the project
      tags:
        - Project
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Update successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectReturn'
        '409':
          description: Project with specified id does not exist
    delete:
      summary: Delete project by id
      tags:
        - Project
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Delete successful
        '409':
          description: Project with specified id does not exist
    get:
      summary: Get project by id
      tags:
        - Project
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Single object returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectReturn'
        '409':
          description: Project with specified id does not exist
  /api/projects/{projectId}/stories:
    get:
      summary: Get all stories on certain project
      tags:
        - Story
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StoryReturn'
          description: Return a list of all stories in a project
    post:
      summary: Create a new story in a project
      tags:
        - Story
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryCreate'
      responses:
        '201':
          description: The created story.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryReturn'
        '409':
          description: Story with specified name in the project.
        '500':
          description: Some server error
  /api/stories/{storyId}:
    patch:
      summary: Update any (or multiple) fields in the story
      tags:
        - Story
      parameters:
        - in: path
          name: storyId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Update successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryReturn'
        '409':
          description: Story with specified id does not exist
    delete:
      summary: Delete story by id
      tags:
        - Story
      parameters:
        - in: path
          name: storyId
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Delete successful
        '409':
          description: Story with specified id does not exist
    get:
      summary: Get story by id
      tags:
        - Story
      parameters:
        - in: path
          name: storyId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Single object returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryReturn'
        '409':
          description: Story with specified id does not exist
  /api/users:
    get:
      summary: Get all users
      tags:
        - User
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserReturn'
          description: Return all a list of all users
    post:
      summary: Create a new User
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: >-
            User created. Return the created User, but without password
            (obviously).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReturn'
        '409':
          description: User with specified email already exists.
        '500':
          description: Some server error
  /api/users/{id}:
    patch:
      summary: Update any (or multiple) fields in the user with specified id
      tags:
        - User
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '200':
          description: Update successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
        '409':
          description: >-
            User with specified id does not exist or email already exists (when
            updating mail)
    delete:
      summary: Delete user by id
      tags:
        - User
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Delete successful
        '409':
          description: User with specified id does not exist
    get:
      summary: Get user by id
      tags:
        - User
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Single object returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReturn'
        '409':
          description: User with specified id does not exist
  /api/users/{id}/password-change:
    patch:
      summary: Update any (or multiple) fields in the project
      tags:
        - User
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
      responses:
        '200':
          description: Update successfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReturn'
        '409':
          description: Invalid old password or new password not valid (too short)
  /api/projects/{id}/users:
    get:
      summary: Get all users of project with id
      tags:
        - UsersOnProjects
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserOnProject'
          description: Return all a list of all users on a project
  /api/users/{id}/projects:
    get:
      summary: Get all projects of user with id
      tags:
        - UsersOnProjects
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in: query
          name: project
          schema:
            type: boolean
          description: Include the whole project object in return body, not just the id
        - in: query
          name: user
          schema:
            type: boolean
          description: Include the whole user object in return body, not just the id
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserOnProject'
          description: Return all a list of all projects of a user
  /api/users/{userId}/projects/{projectId}:
    get:
      summary: Get role for a single user in a single project
      tags:
        - UsersOnProjects
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                schema:
                  $ref: '#/components/schemas/UserOnProject'
          description: Return all a single UserOnProject resource
  /api/projects/{projectId}/users{userId}:
    delete:
      summary: Remove user from a project
      tags:
        - UsersOnProjects
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: User successfully removed
  /api/project-roles:
    post:
      summary: Add user to a project with specified project role
      tags:
        - UsersOnProjects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserOnProject'
      responses:
        '201':
          description: User added to the project. Return the UserOnProject resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOnProject'
        '409':
          description: User with specified id already part of the project
        '500':
          description: Some server error
  /healthcheck:
    get:
      tags:
        - Healthcheck
      description: Respond if the app is running normally
      responses:
        '200':
          description: Healthy
components:
  schemas:
    ProjectCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        users:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
              role:
                $ref: '#/components/schemas/RoleInProject'
      example:
        name: Frogify
        description: Project about musical frogs
        users:
          - id: 1
            role: Developer
          - id: 2
            role: ScrumMaster
      required:
        - name
        - description
        - users
    ProjectReturn:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        id:
          type: number
      example:
        name: Frogify
        description: Project about musical frogs
        id: 1
      required:
        - name
        - description
        - id
    StoryCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        priority:
          $ref: '#/components/schemas/StoryPriority'
        businessValue:
          $ref: '#/components/schemas/BusinessValue'
      example:
        name: FrogifyStory
        description: Story about musical frogs
        priority: MustHave
        businessValue: High
      required:
        - name
        - description
        - priority
        - businessValue
    StoryReturn:
      type: object
      properties:
        id:
          type: number
        projectId:
          type: number
        name:
          type: string
        description:
          type: string
        priority:
          $ref: '#/components/schemas/StoryPriority'
        businessValue:
          $ref: '#/components/schemas/BusinessValue'
      example:
        id: 1
        projectId: 1
        name: Frogify
        description: Story about musical frogs
        priority: MustHave
        businessValue: High
      required:
        - projectId
        - name
        - description
        - priority
        - businessValue
    StoryPriority:
      type: string
      enum:
        - CouldHave
        - ShouldHave
        - MustHave
        - WontHaveThisTime
    BusinessValue:
      type: string
      enum:
        - Low
        - Medium
        - High
    UserCreate:
      type: object
      properties:
        username:
          type: string
        name:
          type: string
        lastName:
          type: string
        password:
          type: string
        email:
          type: string
        isAdmin:
          type: boolean
      example:
        username: admin
        name: Slavko
        lastName: Premrl
        password: badpassword123
        email: bademail123@mail.com
        isAdmin: false
      required:
        - username
        - name
        - lastName
        - password
        - email
        - isAdmin
    UserReturn:
      type: object
      properties:
        id:
          type: number
        username:
          type: string
        name:
          type: string
        lastName:
          type: string
        email:
          type: string
        isAdmin:
          type: boolean
      example:
        id: 2
        username: admin
        name: Slavko
        lastName: Premrl
        email: bademail123@mail.com
        isAdmin: false
      required:
        - id
        - username
        - name
        - lastName
        - email
        - isAdmin
    UserLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: bademail123@mail.com
        password: correctpassword
      required:
        - email
        - password
    PasswordChange:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
      example:
        oldPassword: changemeplease
        newPassword: butnotlikethis
      required:
        - oldPassword
        - newPassword
    RoleInProject:
      type: string
      enum:
        - Developer
        - ProjectManager
        - ProductOwner
        - ScrumMaster
    UserOnProject:
      type: object
      properties:
        userId:
          type: number
        projectId:
          type: number
        role:
          $ref: '#/components/schemas/RoleInProject'
      example:
        userId: 1
        projectId: 2
        role: ScrumMaster
tags:
  - name: Auth
    description: Authentication api
  - name: Project
    description: Project management api
  - name: Story
    description: Story management api
  - name: User
    description: User management api
  - name: UsersOnProjects
    description: >-
      Adding users to projects and getting projects of users and users of
      projects
