openapi: 3.0.4
info:
  title: KANBAN FAKE api
  version: 0.1.0
  description: >-
    This is a simple CRUD API application made with Express and documented with
    Swagger
  contact:
    name: Mark Zakelj
servers:
  - url: http://localhost:8000
paths:
  /api/projects:
    get:
      summary: Get all projects
      tags:
        - Project
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectReturn'
          description: Return all a list of all projects
    post:
      summary: Create a new Project
      tags:
        - Project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        '201':
          description: The created Project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectReturn'
        '409':
          description: Project with specified name already exists.
        '500':
          description: Some server error
  /api/projects/{id}:
    patch:
      summary: Update any (or multiple) fields in the project
      tags:
        - Project
      parameters:
        - in: path
          name: id
          type: integer
      responses:
        '200':
          description: Update successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectReturn'
        '409':
          description: Project with specified id does not exist
    delete:
      summary: Delete project by id
      tags:
        - Project
      parameters:
        - in: path
          name: id
          schema:
            type: integer
      responses:
        '204':
          description: Delete successful
        '409':
          description: Project with specified id does not exist
    get:
      summary: Get project by id
      tags:
        - Project
      parameters:
        - in: path
          name: id
          schema:
            type: integer
      responses:
        '200':
          description: Single object returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectReturn'
        '409':
          description: Project with specified id does not exist
  /api/users:
    get:
      summary: Get all users
      tags:
        - User
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserReturn'
          description: Return all a list of all users
    post:
      summary: Create a new User
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: >-
            User created. Return the created User, but without password
            (obviously).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReturn'
        '409':
          description: User with specified email already exists.
        '500':
          description: Some server error
  /api/users/{id}:
    patch:
      summary: Update any (or multiple) fields in the user with specified id
      tags:
        - User
      parameters:
        - in: path
          name: id
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '200':
          description: Update successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
        '409':
          description: >-
            User with specified id does not exist or email already exists (when
            updating mail)
    delete:
      summary: Delete user by id
      tags:
        - User
      parameters:
        - in: path
          name: id
          schema:
            type: integer
      responses:
        '204':
          description: Delete successful
        '409':
          description: User with specified id does not exist
    get:
      summary: Get user by id
      tags:
        - User
      parameters:
        - in: path
          name: id
          schema:
            type: integer
      responses:
        '200':
          description: Single object returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReturn'
        '409':
          description: User with specified id does not exist
  /api/users/{id}/password-change:
    patch:
      summary: Update any (or multiple) fields in the project
      tags:
        - User
      parameters:
        - in: path
          name: id
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
      responses:
        '200':
          description: Update successfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReturn'
        '409':
          description: Invalid old password or new password not valid (too short)
  /healthcheck:
    get:
      tags:
        - Healthcheck
      description: Respond if the app is running normally
      responses:
        '200':
          description: Healthy
components:
  schemas:
    ProjectCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      example:
        name: Frogify
        description: Project about musical frogs
      required:
        - name
        - description
    ProjectReturn:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        id:
          type: number
      example:
        name: Frogify
        description: Project about musical frogs
        id: 1
      required:
        - name
        - description
        - id
    UserCreate:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
        email:
          type: string
        isAdmin:
          type: boolean
      example:
        name: Slavko
        password: badpassword123
        email: bademail123@mail.com
        isAdmin: false
      required:
        - name
        - password
        - email
        - isAdmin
    UserReturn:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        email:
          type: string
        isAdmin:
          type: boolean
      example:
        id: 2
        name: Slavko
        email: bademail123@mail.com
        isAdmin: false
      required:
        - id
        - name
        - email
        - isAdmin
    PasswordChange:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
      example:
        oldPassword: changemeplease
        newPassword: butnotlikethis
      required:
        - oldPassword
        - newPassword
tags:
  - name: Project
    description: Project management api
  - name: User
    description: User management api
